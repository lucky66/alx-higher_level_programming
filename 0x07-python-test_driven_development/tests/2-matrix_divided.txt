=============================
2-matrix_divided.py test file
=============================

```matrix_divided```
---------------------

Import:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Testing:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

	>>> matrix_divided([[1.8, 2.2, 3.5], [4.3, 5.6, 6]], 2)
	[[0.9, 1.1, 1.75], [2.15, 2.8, 3.0]]

	>>> matrix_divided([[-1.8, -2.2, -3.5], [-4.3, -5.6, -6]], 2)
	[[-0.9, -1.1, -1.75], [-2.15, -2.8, -3.0]]

	>>> matrix_divided([[1.880, 2.24, 30.5], [-64.3, -5.6, -6]], -2)
	[[-0.94, -1.12, -15.25], [32.15, 2.8, 3.0]]


If the divisor is 0, ZeroDivisionError is rised
	>>> matrix_divided([[1.880, 2.24, 30.5], [-64.3, -5.6, -6]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

If the divisor is not provided
	>>> matrix_divided([[1.880, 2.24, 30.5], [-64.3, -5.6, -6]])
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

If div is not a number(integer or float)
	>>> matrix_divided([[1.880, 2.24, 30.5], [-64.3, -5.6, -6]], "hello")
	Traceback (most recent call last):
	TypeError: div must be a number

If matrix is not a list of lists of integers or float &&
If all rows of the matrix are not of the same size
	>>> matrix_divided([["Hello", "Holberton"], [6, 7]], 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[3, 4, 5], [6, 7]], 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

	>>> matrix_divided("Hello", 9)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[2, 3], [4, 5]], float('inf'))
	[[0.0, 0.0], [0.0, 0.0]]
